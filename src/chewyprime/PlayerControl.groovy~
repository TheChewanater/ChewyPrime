package chewyprime;

import com.jme3.scene.control.*
import com.jme3.scene.Spatial
import com.jme3.renderer.*
import com.jme3.input.*
import com.jme3.input.controls.*
import com.jme3.math.*

/* Controls the player, of course. */
class PlayerControl extends AbstractControl
{
  protected mEnabled = true
  
  protected mPlayerSpatial = null
  protected mCamera 
  protected mInputManager
  
  /* The state of each of the WASD keys, in order */
  boolean[] mWASD = [ false, false, false, false ]
  
  /* Motion speed in units per second */
  private static final float MOTION_SPEED = 4.0f
  
  public PlayerControl(InputManager inputManager, Camera camera)
  {
    mInputManager = inputManager
    
    mCamera = camera
    
    mInputManager.addMapping("PlayerControl::w", new KeyTrigger(KeyInput.KEY_W))
    mInputManager.addMapping("PlayerControl::a", new KeyTrigger(KeyInput.KEY_A))
    mInputManager.addMapping("PlayerControl::s", new KeyTrigger(KeyInput.KEY_S))
    mInputManager.addMapping("PlayerControl::d", new KeyTrigger(KeyInput.KEY_D))
    
    String[] actions = [ "PlayerControl::w", "PlayerControl::a", "PlayerControl::s", "PlayerControl::d" ]
    mInputManager.addListener(mActionListener, actions)
  }
  
  protected ActionListener mActionListener = new ActionListener() {
    public void onAction(String name, boolean isPressed, float time)
    {
      if(isPressed)
        {
          if(name == "PlayerControl::w")
            mWASD[0] = true;
          else if(name == "PlayerControl::a")
            mWASD[1] = true;
          else if(name == "PlayerControl::s")
            mWASD[2] = true;
          else if(name == "PlayerControl::d")
            mWASD[3] = true;
        }
      else
        {
          if(name == "PlayerControl::w")
            mWASD[0] = false;
          else if(name == "PlayerControl::a")
            mWASD[1] = false;
          else if(name == "PlayerControl::s")
            mWASD[2] = false;
          else if(name == "PlayerControl::d")
            mWASD[3] = false;
        }
    }
  };
  
  public Control cloneForSpatial(Spatial spatial)
  {
    try
      {
        return (PlayerControl)clone()
      }
    catch(CloneNotSupportedException e)
      {
        return null
      }
  }
  
  public void controlUpdate(float time)
  {
    /* The player spatial might not have been set yet for some reason */
    if(mPlayerSpatial == null) return
    
    /* Only if at least one movement key is pressed, to avoid wasting time */
    if(mWASD[0] || mWASD[1] || mWASD[2] || mWASD[3])
      {
        /* Figure out the direction and rotate it to the camera's local transformation */
        Vector3f velocity = new Vector3f()
        if(mWASD[0]) velocity.z += +1.0f
        if(mWASD[1]) velocity.x += +1.0f
        if(mWASD[2]) velocity.z += -1.0f
        if(mWASD[3]) velocity.x += -1.0f
        mCamera.getRotation().mult(velocity, velocity)
        
        /* Convert it to a 2d vector of the correct magnitude */
        velocity.y = 0
        velocity.normalizeLocal()
        velocity.multLocal((float)(MOTION_SPEED * time))
        
        /* Set the new transformation */
        Transform transform = mPlayerSpatial.getLocalTransform()
        
        Quaternion newRotation = new Quaternion(transform.getRotation())
        newRotation.lookAt(velocity, new Vector3f(0, 1, 0))
        
        /* Smoothly interpolate to the new rotation so the player doesn't abruptly flip around */
        transform.getRotation().slerp(newRotation, (float)(time * 10.0f))
        transform.getTranslation().addLocal(velocity)
        
        mPlayerSpatial.setLocalTransform(transform)
    }
  }
  
  public void controlRender(RenderManager rm, ViewPort vp)
  {
  }
  
  public void setEnabled(boolean enabled)
  {
    mEnabled = enabled
  }
  
  public void setSpatial(Spatial spatial)
  {
    mPlayerSpatial = spatial
  }
  
  public boolean isEnabled()
  {
    return mEnabled
  }
}

