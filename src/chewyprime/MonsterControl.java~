package chewyprime;

import chewyprime.rpg.Character;

import com.jme3.animation.AnimChannel;
import com.jme3.animation.AnimControl;
import com.jme3.animation.LoopMode;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.KeyInput;
import com.jme3.input.InputManager;
import com.jme3.renderer.Camera;
import com.jme3.renderer.RenderManager;
import com.jme3.renderer.ViewPort;
import com.jme3.scene.control.AbstractControl;
import com.jme3.scene.control.Control;
import com.jme3.scene.Spatial;
import com.jme3.math.*;

/**
 * Controls the player, of course.
 * 
 * @author Thomas Clark
 */
class PlayerControl extends AbstractControl
{
  protected Camera mCamera;
  protected Character mCharacter;
  
  private AnimControl mControl = null;  
  private AnimChannel mChannel = null;
  
  /* Motion speed in units per second */
  private static final float MOTION_SPEED = 4.0f;
  
  public PlayerControl(InputManager inputManager, Camera cam, Character character)
  {
    mCamera = cam;
    mCharacter = character;
    
    inputManager.addMapping("PlayerControl::w", new KeyTrigger(KeyInput.KEY_W));
    inputManager.addMapping("PlayerControl::a", new KeyTrigger(KeyInput.KEY_A));
    inputManager.addMapping("PlayerControl::s", new KeyTrigger(KeyInput.KEY_S));
    inputManager.addMapping("PlayerControl::d", new KeyTrigger(KeyInput.KEY_D));
    
    String[] actions = { "PlayerControl::w", "PlayerControl::a", "PlayerControl::s", "PlayerControl::d" };
    inputManager.addListener(mActionListener, actions);
  }
  
  protected ActionListener mActionListener = new ActionListener()
  {
    public void onAction(String name, boolean isPressed, float time)
    {
      if(isPressed)
        {
          if(name == "PlayerControl::w")
            mWASD[0] = true;
          else if(name == "PlayerControl::a")
            mWASD[1] = true;
          else if(name == "PlayerControl::s")
            mWASD[2] = true;
          else if(name == "PlayerControl::d")
            mWASD[3] = true;
        }
      else
        {
          if(name == "PlayerControl::w")
            mWASD[0] = false;
          else if(name == "PlayerControl::a")
            mWASD[1] = false;
          else if(name == "PlayerControl::s")
            mWASD[2] = false;
          else if(name == "PlayerControl::d")
            mWASD[3] = false;
        }
    }
  };
  
  public void controlUpdate(float time)
  {
    /* The player spatial might not have been set yet for some reason */
    if(spatial == null) return;
    
    /* Only update if the player will actually move one way or another */
    if((mWASD[0] != mWASD[2]) || (mWASD[1] != mWASD[3]))
      {
        /* Figure out the direction and rotate it to the camera's local transformation */
        Vector3f velocity = new Vector3f();
        if(mWASD[0]) velocity.z += +1.0f;
        if(mWASD[1]) velocity.x += +1.0f;
        if(mWASD[2]) velocity.z += -1.0f;
        if(mWASD[3]) velocity.x += -1.0f;
        mCamera.getRotation().mult(velocity, velocity);
        
        /* Convert it to a 2d vector of the correct magnitude */
        velocity.y = 0;
        velocity.normalizeLocal();
        velocity.multLocal((float)(MOTION_SPEED * time));
        
        /* Set the new transformation */
        Transform transform = spatial.getLocalTransform();
        
        Quaternion newRotation = new Quaternion(transform.getRotation());
        newRotation.lookAt(velocity, new Vector3f(0, 1, 0));
        
        /* Smoothly interpolate to the new rotation so the player doesn't abruptly flip around */
        transform.getRotation().slerp(newRotation, (float)(time * 10.0f));
        transform.getTranslation().addLocal(velocity);
        
        spatial.setLocalTransform(transform);
        
        if(mChannel.getAnimationName() != "Walk")
          mChannel.setAnim("Walk Forwards");
    }
    else
      {
        if(mChannel.getAnimationName() != "Walk")
          mChannel.setAnim("Idle");
      }
  }
  
  public Character getCharater()
  {
    return mCharacter;
  }
  
  public Control cloneForSpatial(Spatial spatial)
  {
    try
      {
        return (PlayerControl)clone();
      }
    catch(CloneNotSupportedException e)
      {
        return null;
      }
  }
  
  public void controlRender(RenderManager rm, ViewPort vp)
  {
  }
  
  public void setSpatial(Spatial spatial)
  {
    super.setSpatial(spatial);
    
    mControl = spatial.getControl(AnimControl.class);
    mChannel = mControl.createChannel();
    mChannel.setLoopMode(LoopMode.Loop);
    mChannel.setSpeed(1.0f);
  }
}
