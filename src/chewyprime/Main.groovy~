package chewyprime

import com.jme3.app.Application
import com.jme3.material.Material
import com.jme3.math.*
import com.jme3.scene.*
import com.jme3.scene.shape.*
import com.jme3.input.*
import com.jme3.input.controls.*
import com.jme3.light.*
import com.jme3.texture.*
import com.jme3.renderer.*
import com.jme3.post.*;
import com.jme3.post.filters.*
import com.jme3.system.*
import com.jme3.util.SkyFactory
import com.jme3.shadow.PssmShadowRenderer

import chewyprime.player.*
import chewyprime.camera.*

public class Main extends Application
{
  static def main(String[] args)
  {
    Main app = new Main()
    
    app.start()
  }
  
  protected mRoot = new Node("Root")
  protected mPlayer
  protected mCamera
  protected mLight
  
  void setupFilters()
  {
    def bloom = new BloomFilter(BloomFilter.GlowMode.Objects)
    bloom.setBlurScale(1.0f)
    bloom.setDownSamplingFactor(8.0f)
    
    def fpp = new FilterPostProcessor(assetManager)
    fpp.addFilter new FXAAFilter()
    fpp.addFilter(bloom)
    
    viewPort.addProcessor(fpp)
  }
  
  void initialize()
  {
    super.initialize()
    
    setupFilters()
    
    /* Environment */
    def mFloor = assetManager.loadModel("Models/Floor.mesh.xml")
    mFloor.setMaterial(assetManager.loadMaterial("Materials/Floor.j3m"))
    
    /* Player */
    def playerMesh = assetManager.loadModel("Models/Tux.mesh.xml")
    playerMesh.setMaterial(assetManager.loadMaterial("Materials/Player.j3m"))
    playerMesh.setLocalRotation(new Quaternion(0, 0, 0, 1))
    
    mPlayer = new ChewyPlayerNode("Player", inputManager, cam)
    mPlayer.attachChild(playerMesh)
    
    /* Light */
    mLight = new DirectionalLight()
    mLight.setDirection(new Vector3f(0.0f, -0.5f, -1.0f))
    
    /* Camera */
    mCamera = new ChewyCameraNode("Camera", inputManager, cam, mPlayer);
    mCamera.setLocalTranslation(new Vector3f(0.0f, 4.0f, 8.0f))
    
    /* Sky */
    def sky = assetManager.loadModel("Models/Sky.mesh.xml")
    sky.setMaterial(assetManager.loadMaterial("Materials/Sky.j3m"))
    sky.addControl(new SkyControl(mCamera))
    
    mRoot.attachChild(mCamera)
    mRoot.attachChild(mFloor)
    mRoot.attachChild(mPlayer)
    mRoot.addLight(mLight)
    mRoot.attachChild(sky)
    mRoot.addLight(new AmbientLight())
    
    viewPort.attachScene(mRoot)
  }
  
  public void start()
  {
    /* Set the settings from a dialog */
    AppSettings settings = new AppSettings(true)
    
    if(JmeSystem.showSettingsDialog(settings, true))
      setSettings(settings)
    else
      return
    
    super.start()
  }
  
  public void update()
  {
    super.update()
    
    float time = timer.getTimePerFrame()
    
    mRoot.updateLogicalState(time)
    mRoot.updateGeometricState()
    
    renderManager.render(time, true)
  }
}

